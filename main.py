import os
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from fastapi import FastAPI, Request
import psycopg2
from psycopg2.extras import RealDictCursor

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")
DATABASE_URL = os.environ.get("DATABASE_URL")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required!")
if not WEBAPP_URL:
    raise ValueError("WEBAPP_URL environment variable is required!")
if not DATABASE_URL:
    raise ValueError("DATABASE_URL environment variable is required!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()


# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
def get_db_connection():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –î–ª—è Render.com PostgreSQL
        conn = psycopg2.connect(DATABASE_URL, sslmode='require')
        return conn
    except Exception as e:
        logger.error(f"Database connection error: {e}")
        raise


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await message.answer(
        "üé• **VideoCall Bot**\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ Telegram!\n\n"
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫\n"
        "/list - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–≤–æ–Ω–∫–æ–≤\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –∑–≤–æ–Ω–æ–∫\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@dp.message(Command("create"))
async def cmd_create(message: types.Message):
    import random

    try:
        conn = get_db_connection()
        cur = conn.cursor()

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥
        max_attempts = 10
        code = None

        for attempt in range(max_attempts):
            code = ''.join([str(random.randint(0, 9)) for _ in range(6)])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ —É–Ω–∏–∫–∞–ª–µ–Ω
            cur.execute("SELECT code FROM calls WHERE code = %s", (code,))
            if not cur.fetchone():
                break
        else:
            await message.answer("‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="Markdown")
            cur.close()
            conn.close()
            return

        start_ts = int(datetime.now().timestamp())
        created_ts = start_ts

        cur.execute(
            "INSERT INTO calls (code, creator_id, start_ts, duration_min, created_ts, active) VALUES (%s, %s, %s, %s, %s, %s)",
            (code, message.from_user.id, start_ts, 120, created_ts, True)
        )
        conn.commit()

        await message.answer(
            f"‚úÖ **–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"üî¢ **–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** `{code}`\n"
            f"‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 2 —á–∞—Å–∞\n\n"
            f"üì± **–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:**\n"
            f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Mini App –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
            f"2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ `{code}`\n"
            f"3. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=f"{WEBAPP_URL}?code={code}"))]
            ])
        )

        cur.close()
        conn.close()

    except Exception as e:
        logger.error(f"Error creating call: {e}")
        await message.answer("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.", parse_mode="Markdown")


@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute(
            "SELECT code, start_ts, duration_min, active FROM calls WHERE creator_id = %s ORDER BY created_ts DESC",
            (message.from_user.id,)
        )
        calls = cur.fetchall()

        if not calls:
            await message.answer("üì≠ **–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫",
                                 parse_mode="Markdown")
            cur.close()
            conn.close()
            return

        response = "üìû **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:**\n\n"
        for call in calls:
            code, start_ts, duration, active = call
            start_time = datetime.fromtimestamp(start_ts).strftime('%d.%m.%Y %H:%M')
            status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if active else "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω"
            response += f"üî¢ **–ö–æ–¥:** `{code}`\n"
            response += f"‚è∞ **–í—Ä–µ–º—è:** {start_time}\n"
            response += f"‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** {duration} –º–∏–Ω\n"
            response += f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n\n"

        await message.answer(response, parse_mode="Markdown")
        cur.close()
        conn.close()

    except Exception as e:
        logger.error(f"Database error in /list: {e}")
        await message.answer("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–≤–æ–Ω–∫–æ–≤**", parse_mode="Markdown")


@dp.message(Command("delete"))
async def cmd_delete(message: types.Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n`/delete <–∫–æ–¥_–∑–≤–æ–Ω–∫–∞>`\n\n–ü—Ä–∏–º–µ—Ä: `/delete 123456`",
                             parse_mode="Markdown")
        return

    code = args[1]
    if not code.isdigit() or len(code) != 6:
        await message.answer("‚ùå **–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä**", parse_mode="Markdown")
        return

    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM calls WHERE code = %s AND creator_id = %s", (code, message.from_user.id))
        conn.commit()

        if cur.rowcount > 0:
            await message.answer(f"‚úÖ **–ó–≤–æ–Ω–æ–∫ {code} —É–¥–∞–ª–µ–Ω**", parse_mode="Markdown")
        else:
            await message.answer("‚ùå **–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è**", parse_mode="Markdown")

        cur.close()
        conn.close()

    except Exception as e:
        logger.error(f"Database error in /delete: {e}")
        await message.answer("‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–≤–æ–Ω–∫–∞**", parse_mode="Markdown")


# FastAPI endpoints –¥–ª—è WebApp
@app.get("/")
async def read_root():
    return {"message": "VideoCall Bot API", "status": "running"}


@app.get("/call/{code}/status")
async def call_status(code: str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞"""
    try:
        conn = get_db_connection()
        cur = conn.cursor(cursor_factory=RealDictCursor)
        cur.execute("SELECT active, start_ts, duration_min FROM calls WHERE code = %s", (code,))
        call = cur.fetchone()
        cur.close()
        conn.close()

        if call:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –ª–∏ –≤—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞
            end_time = call['start_ts'] + (call['duration_min'] * 60)
            current_time = datetime.now().timestamp()
            is_active = call['active'] and current_time <= end_time

            time_left = max(0, end_time - current_time)
            minutes_left = int(time_left // 60)

            return {
                "active": is_active,
                "exists": True,
                "minutes_left": minutes_left,
                "valid_until": datetime.fromtimestamp(end_time).isoformat()
            }
        return {"active": False, "exists": False}
    except Exception as e:
        logger.error(f"Call status error: {e}")
        return {"active": False, "exists": False}


@app.post("/call/{code}/join")
async def join_call(code: str):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞"""
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("UPDATE calls SET active = TRUE WHERE code = %s", (code,))
        conn.commit()
        cur.close()
        conn.close()
        return {"success": True}
    except Exception as e:
        logger.error(f"Join call error: {e}")
        return {"success": False}


# Webhook endpoint –¥–ª—è Telegram
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/ping")
async def ping():
    return {"ok": True}


@app.on_event("startup")
async def on_startup():
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = f"{WEBAPP_URL}/webhook"
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Bot started successfully. Webhook: {webhook_url}")
    except Exception as e:
        logger.error(f"‚ùå Webhook setup failed: {e}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        conn = get_db_connection()
        cur = conn.cursor()
        cur.execute("""
                    CREATE TABLE IF NOT EXISTS calls
                    (
                        id
                        SERIAL
                        PRIMARY
                        KEY,
                        code
                        VARCHAR
                    (
                        6
                    ) UNIQUE NOT NULL,
                        creator_id BIGINT NOT NULL,
                        start_ts INTEGER NOT NULL,
                        duration_min INTEGER NOT NULL,
                        created_ts INTEGER NOT NULL,
                        active BOOLEAN DEFAULT TRUE
                        )
                    """)
        conn.commit()
        cur.close()
        conn.close()
        logger.info("‚úÖ Database initialized")
    except Exception as e:
        logger.error(f"‚ùå Database initialization failed: {e}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=10000)