import os
import logging
import random
import string
import time
import jwt
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")
JITSI_DOMAIN = os.environ.get("JITSI_DOMAIN", "meet.jit.si")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required!")
if not WEBAPP_URL:
    raise ValueError("WEBAPP_URL environment variable is required!")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JWT
try:
    import jwt

    JWT_AVAILABLE = True
    logger.info("‚úÖ JWT module is available")
except ImportError:
    JWT_AVAILABLE = False
    logger.warning("‚ö†Ô∏è JWT module not available - using open rooms")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–≤–æ–Ω–∫–æ–≤
calls_storage = {}


def generate_jwt_token(room_name, user_id, user_name="Participant", is_moderator=False):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Jitsi Meet"""
    if not JWT_AVAILABLE:
        return None

    try:
        JITSI_APP_ID = "telegram-bot"
        JITSI_APP_SECRET = "your-secret-key-change-in-production"

        payload = {
            'context': {
                'user': {
                    'id': user_id,
                    'name': user_name,
                    'moderator': is_moderator
                }
            },
            'aud': 'jitsi',
            'iss': JITSI_APP_ID,
            'sub': JITSI_DOMAIN,
            'room': room_name,
            'exp': int(time.time()) + 24 * 3600,
            'nbf': int(time.time()) - 10,
        }

        token = jwt.encode(payload, JITSI_APP_SECRET, algorithm='HS256')
        return token
    except Exception as e:
        logger.error(f"JWT token generation error: {e}")
        return None


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await message.answer(
        "üé• **Telegram Call - –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏**\n\n"
        "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ Jitsi Meet\n\n"
        "üìã **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/create - —Å–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫\n"
        "/list - —Å–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –∑–≤–æ–Ω–æ–∫\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@dp.message(Command("create"))
async def cmd_create(message: types.Message):
    code = ''.join(random.choices(string.digits, k=6))
    room_name = f"telegram_call_{code}"

    calls_storage[code] = {
        'creator_id': message.from_user.id,
        'creator_name': message.from_user.first_name,
        'room_name': room_name,
        'start_ts': int(datetime.now().timestamp()),
        'active': True,
        'participants': [],
        'is_public': True
    }

    jitsi_url = f"https://{JITSI_DOMAIN}/{room_name}"

    await message.answer(
        f"‚úÖ **–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!**\n\n"
        f"üî¢ **–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** `{code}`\n"
        f"üë§ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:** {message.from_user.first_name}\n"
        f"‚è∞ **–°–æ–∑–¥–∞–Ω:** {datetime.now().strftime('%H:%M')}\n\n"
        f"üì± **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ Mini App**",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=f"{WEBAPP_URL}?code={code}"))],
            [InlineKeyboardButton(text="üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞", url=jitsi_url)]
        ])
    )


@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    user_calls = {code: data for code, data in calls_storage.items()
                  if data['creator_id'] == message.from_user.id}

    if not user_calls:
        await message.answer("üì≠ **–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫",
                             parse_mode="Markdown")
        return

    response = "üìû **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:**\n\n"
    for code, data in user_calls.items():
        start_time = datetime.fromtimestamp(data['start_ts']).strftime('%H:%M')
        participants = len(data['participants'])
        response += f"üî¢ **–ö–æ–¥:** `{code}`\n"
        response += f"‚è∞ **–í—Ä–µ–º—è:** {start_time}\n"
        response += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {participants}\n\n"

    await message.answer(response, parse_mode="Markdown")


@dp.message(Command("delete"))
async def cmd_delete(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()

    if len(args) < 2:
        # –ï—Å–ª–∏ –∫–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        user_calls = {code: data for code, data in calls_storage.items()
                      if data['creator_id'] == message.from_user.id}

        if not user_calls:
            await message.answer("‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è**", parse_mode="Markdown")
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–¥–∞–º–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        keyboard = []
        for code in user_calls.keys():
            keyboard.append([InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å –∑–≤–æ–Ω–æ–∫ {code}", callback_data=f"delete_{code}")])

        markup = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            "üóë **–í—ã–±–µ—Ä–∏—Ç–µ –∑–≤–æ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: `/delete <–∫–æ–¥>`\n\n"
            "–ü—Ä–∏–º–µ—Ä: `/delete 123456`",
            reply_markup=markup,
            parse_mode="Markdown"
        )
        return

    code = args[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫–æ–¥–∞
    if not code.isdigit() or len(code) != 6:
        await message.answer("‚ùå **–ö–æ–¥ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 6 —Ü–∏—Ñ—Ä**\n\n–ü—Ä–∏–º–µ—Ä: `/delete 123456`", parse_mode="Markdown")
        return

    # –£–¥–∞–ª—è–µ–º –∑–≤–æ–Ω–æ–∫
    if code in calls_storage and calls_storage[code]['creator_id'] == message.from_user.id:
        room_name = calls_storage[code]['room_name']
        del calls_storage[code]
        await message.answer(f"‚úÖ **–ó–≤–æ–Ω–æ–∫ {code} —É–¥–∞–ª–µ–Ω**\n\n–ö–æ–º–Ω–∞—Ç–∞: `{room_name}`", parse_mode="Markdown")
    else:
        await message.answer("‚ùå **–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è**", parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data.startswith('delete_'))
async def process_delete_callback(callback_query: types.CallbackQuery):
    code = callback_query.data.replace('delete_', '')

    if code in calls_storage and calls_storage[code]['creator_id'] == callback_query.from_user.id:
        room_name = calls_storage[code]['room_name']
        del calls_storage[code]
        await callback_query.message.edit_text(
            f"‚úÖ **–ó–≤–æ–Ω–æ–∫ {code} —É–¥–∞–ª–µ–Ω**\n\n–ö–æ–º–Ω–∞—Ç–∞: `{room_name}`",
            parse_mode="Markdown"
        )
    else:
        await callback_query.answer("‚ùå –ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@app.get("/call/{code}/info")
async def call_info(code: str, request: Request):
    if code in calls_storage:
        call = calls_storage[code]
        client_ip = request.client.host
        user_id = f"user_{client_ip}_{int(time.time())}"
        user_name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{random.randint(1000, 9999)}"

        jwt_token = generate_jwt_token(call['room_name'], user_id, user_name)

        response = {
            "exists": True,
            "room_name": call['room_name'],
            "jwt_token": jwt_token,
            "active": call['active'],
            "participants_count": len(call['participants'])
        }
        return response

    return {"exists": False, "active": False}


@app.post("/call/{code}/join")
async def join_call(code: str, request: Request):
    if code in calls_storage:
        call = calls_storage[code]
        client_ip = request.client.host
        user_id = f"user_{client_ip}_{int(time.time())}"

        call['participants'].append({
            'user_id': user_id,
            'joined_at': datetime.now().isoformat(),
            'ip': client_ip
        })

        call['active'] = True

        return {
            "success": True,
            "user_id": user_id,
            "participants_count": len(call['participants'])
        }

    return {"success": False, "message": "Call not found"}


# Webhook endpoint –¥–ª—è Telegram
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/ping")
async def ping():
    return {"ok": True}


@app.on_event("startup")
async def on_startup():
    webhook_url = f"{WEBAPP_URL}/webhook"
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Bot started successfully. Webhook: {webhook_url}")
    except Exception as e:
        logger.error(f"‚ùå Webhook setup failed: {e}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=10000)