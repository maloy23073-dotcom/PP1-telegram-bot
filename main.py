import os
import logging
import random
import string
import time
import jwt
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")
JITSI_DOMAIN = os.environ.get("JITSI_DOMAIN", "meet.jit.si")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required!")
if not WEBAPP_URL:
    raise ValueError("WEBAPP_URL environment variable is required!")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ JWT
try:
    import jwt

    JWT_AVAILABLE = True
    logger.info("‚úÖ JWT module is available")
except ImportError:
    JWT_AVAILABLE = False
    logger.warning("‚ö†Ô∏è JWT module not available - using open rooms")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–≤–æ–Ω–∫–æ–≤
calls_storage = {}


def generate_jwt_token(room_name, user_id, user_name="Participant", is_moderator=False):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Jitsi Meet"""
    if not JWT_AVAILABLE:
        return None

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Jitsi
        JITSI_APP_ID = "telegram-bot"
        JITSI_APP_SECRET = "your-secret-key-change-in-production"

        payload = {
            'context': {
                'user': {
                    'id': user_id,
                    'name': user_name,
                    'avatar': '',
                    'email': '',
                    'moderator': is_moderator
                },
                'group': ''
            },
            'aud': 'jitsi',
            'iss': JITSI_APP_ID,
            'sub': JITSI_DOMAIN,
            'room': room_name,
            'exp': int(time.time()) + 24 * 3600,  # 24 —á–∞—Å–∞
            'nbf': int(time.time()) - 10,
            'moderator': is_moderator
        }

        token = jwt.encode(payload, JITSI_APP_SECRET, algorithm='HS256')
        return token
    except Exception as e:
        logger.error(f"JWT token generation error: {e}")
        return None


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await message.answer(
        "üé• **Telegram Call - –í–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏**\n\n"
        "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ Jitsi Meet\n\n"
        "üìã **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/create - —Å–æ–∑–¥–∞—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π –∑–≤–æ–Ω–æ–∫\n"
        "/list - –≤–∞—à–∏ –∑–≤–æ–Ω–∫–∏\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –∑–≤–æ–Ω–æ–∫",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@dp.message(Command("create"))
async def cmd_create(message: types.Message):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã
    code = ''.join(random.choices(string.digits, k=6))
    room_name = f"telegram_call_{code}"

    calls_storage[code] = {
        'creator_id': message.from_user.id,
        'creator_name': message.from_user.first_name,
        'room_name': room_name,
        'start_ts': int(datetime.now().timestamp()),
        'active': True,
        'participants': [],
        'is_public': True  # –î–µ–ª–∞–µ–º –∫–æ–º–Ω–∞—Ç—É –ø—É–±–ª–∏—á–Ω–æ–π
    }

    jitsi_url = f"https://{JITSI_DOMAIN}/{room_name}"

    await message.answer(
        f"‚úÖ **–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!**\n\n"
        f"üî¢ **–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** `{code}`\n"
        f"üåê **–ö–æ–º–Ω–∞—Ç–∞:** {room_name}\n"
        f"üë§ **–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä:** {message.from_user.first_name}\n"
        f"‚è∞ **–°–æ–∑–¥–∞–Ω:** {datetime.now().strftime('%H:%M')}\n\n"
        f"üì± **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —Ç–∞–∫:**\n"
        f"1. –ù–∞–∂–∏–º–∞—é—Ç –∫–Ω–æ–ø–∫—É '–û—Ç–∫—Ä—ã—Ç—å VideoCall'\n"
        f"2. –í–≤–æ–¥—è—Ç –∫–æ–¥ `{code}`\n"
        f"3. –ù–∞–∂–∏–º–∞—é—Ç '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=f"{WEBAPP_URL}?code={code}"))],
            [InlineKeyboardButton(text="üîó –ü—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞", url=jitsi_url)]
        ])
    )


@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    user_calls = {code: data for code, data in calls_storage.items()
                  if data['creator_id'] == message.from_user.id}

    if not user_calls:
        await message.answer("üì≠ **–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤**", parse_mode="Markdown")
        return

    response = "üìû **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:**\n\n"
    for code, data in user_calls.items():
        start_time = datetime.fromtimestamp(data['start_ts']).strftime('%H:%M')
        participants = len(data['participants'])
        response += f"üî¢ **–ö–æ–¥:** `{code}`\n"
        response += f"‚è∞ **–í—Ä–µ–º—è:** {start_time}\n"
        response += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {participants}\n"
        response += f"üåê **–°—Ç–∞—Ç—É—Å:** {'üîì –û—Ç–∫—Ä—ã—Ç—ã–π' if data['is_public'] else 'üîí –ó–∞–∫—Ä—ã—Ç—ã–π'}\n\n"

    await message.answer(response, parse_mode="Markdown")


@app.get("/call/{code}/info")
async def call_info(code: str, request: Request):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ç–æ–∫–µ–Ω–∞ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞"""
    logger.info(f"Call info requested for code: {code}")

    if code in calls_storage:
        call = calls_storage[code]

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_agent = request.headers.get('user-agent', '')
        client_ip = request.client.host
        user_id = f"user_{client_ip}_{int(time.time())}"

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫)
        is_organizer = False  # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        user_name = f"–£—á–∞—Å—Ç–Ω–∏–∫_{random.randint(1000, 9999)}"
        jwt_token = generate_jwt_token(call['room_name'], user_id, user_name, is_moderator=is_organizer)

        response = {
            "exists": True,
            "room_name": call['room_name'],
            "jwt_token": jwt_token,
            "is_public": call.get('is_public', True),
            "active": call['active'],
            "participants_count": len(call['participants']),
            "jwt_available": JWT_AVAILABLE
        }
        logger.info(f"Call found: {response}")
        return response

    response = {"exists": False, "active": False}
    logger.info(f"Call not found: {response}")
    return response


@app.post("/call/{code}/join")
async def join_call(code: str, request: Request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–≤–æ–Ω–∫–∞"""
    logger.info(f"Join call requested for code: {code}")

    if code in calls_storage:
        call = calls_storage[code]
        client_ip = request.client.host

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = f"user_{client_ip}_{int(time.time())}"

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        call['participants'].append({
            'user_id': user_id,
            'joined_at': datetime.now().isoformat(),
            'ip': client_ip
        })

        call['active'] = True

        response = {
            "success": True,
            "user_id": user_id,
            "participants_count": len(call['participants']),
            "room_name": call['room_name']
        }
        logger.info(f"Join successful: {response}")
        return response

    response = {"success": False, "message": "Call not found"}
    logger.info(f"Join failed: {response}")
    return response


# Webhook endpoint –¥–ª—è Telegram
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/ping")
async def ping():
    return {"ok": True, "jwt_available": JWT_AVAILABLE}


@app.on_event("startup")
async def on_startup():
    webhook_url = f"{WEBAPP_URL}/webhook"
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Bot started successfully. Webhook: {webhook_url}")
        logger.info(f"‚úÖ JWT available: {JWT_AVAILABLE}")
        logger.info(f"‚úÖ Jitsi domain: {JITSI_DOMAIN}")
    except Exception as e:
        logger.error(f"‚ùå Webhook setup failed: {e}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=10000)