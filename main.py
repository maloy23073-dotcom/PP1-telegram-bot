import os
import logging
import random
import string
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from fastapi import FastAPI, Request
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")
JITSI_DOMAIN = os.environ.get("JITSI_DOMAIN", "meet.jit.si")
JITSI_APP_ID = os.environ.get("JITSI_APP_ID", "")
JITSI_APP_SECRET = os.environ.get("JITSI_APP_SECRET", "")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required!")
if not WEBAPP_URL:
    raise ValueError("WEBAPP_URL environment variable is required!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()
app.mount("/static", StaticFiles(directory="static"), name="static")

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–≤–æ–Ω–∫–æ–≤ —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏
calls_storage = {}


def generate_jwt_token(room_name, user_id, is_moderator=False):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è Jitsi (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)"""
    import time
    import jwt

    payload = {
        'context': {
            'user': {
                'id': user_id,
                'name': f'User_{user_id}',
                'avatar': '',
                'email': '',
                'moderator': is_moderator
            }
        },
        'aud': 'jitsi',
        'iss': JITSI_APP_ID,
        'sub': JITSI_DOMAIN,
        'room': room_name,
        'exp': int(time.time()) + 24 * 3600,  # 24 —á–∞—Å–∞
        'nbf': int(time.time()) - 10  # 10 —Å–µ–∫—É–Ω–¥ –Ω–∞–∑–∞–¥
    }

    if JITSI_APP_ID and JITSI_APP_SECRET:
        return jwt.encode(payload, JITSI_APP_SECRET, algorithm='HS256')
    return None


@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await message.answer(
        "üé• **VideoCall Bot –Ω–∞ Jitsi Meet**\n\n"
        "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —Å –º–æ–±–∏–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π!\n\n"
        "üìã **–ö–æ–º–∞–Ω–¥—ã:**\n"
        "/create - —Å–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫\n"
        "/list - –≤–∞—à–∏ –∑–≤–æ–Ω–∫–∏\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –∑–≤–æ–Ω–æ–∫",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@dp.message(Command("create"))
async def cmd_create(message: types.Message):
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏ –∏–º—è –∫–æ–º–Ω–∞—Ç—ã
    code = ''.join(random.choices(string.digits, k=6))
    room_name = f"tg_{code}_{message.from_user.id}"

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Ç–æ–∫–µ–Ω –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    jwt_token = generate_jwt_token(room_name, f"org_{message.from_user.id}", is_moderator=True)

    calls_storage[code] = {
        'creator_id': message.from_user.id,
        'room_name': room_name,
        'jwt_token': jwt_token,
        'start_ts': int(datetime.now().timestamp()),
        'active': True,
        'participants': []
    }

    # –°—Å—ã–ª–∫–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    org_jitsi_url = f"https://{JITSI_DOMAIN}/{room_name}"
    if jwt_token:
        org_jitsi_url += f"#jwt={jwt_token}"

    await message.answer(
        f"‚úÖ **–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!**\n\n"
        f"üî¢ **–ö–æ–¥:** `{code}`\n"
        f"üëë **–í—ã - –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä**\n"
        f"‚è∞ **–°–æ–∑–¥–∞–Ω:** {datetime.now().strftime('%H:%M')}\n\n"
        f"üì± **–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è —Ç–∞–∫:**\n"
        f"1. –ù–∞–∂–∏–º–∞—é—Ç –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ\n"
        f"2. –í–≤–æ–¥—è—Ç –∫–æ–¥ `{code}`\n"
        f"3. –ù–∞–∂–∏–º–∞—é—Ç '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=f"{WEBAPP_URL}?code={code}"))],
            [InlineKeyboardButton(text="üîó –î–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞", url=org_jitsi_url)]
        ])
    )


@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    user_calls = {code: data for code, data in calls_storage.items()
                  if data['creator_id'] == message.from_user.id}

    if not user_calls:
        await message.answer("üì≠ **–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤**", parse_mode="Markdown")
        return

    response = "üìû **–í–∞—à–∏ –∑–≤–æ–Ω–∫–∏:**\n\n"
    for code, data in user_calls.items():
        start_time = datetime.fromtimestamp(data['start_ts']).strftime('%H:%M')
        participants = len(data['participants'])
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if data['active'] else "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω"
        response += f"üî¢ **–ö–æ–¥:** `{code}`\n"
        response += f"‚è∞ **–í—Ä–µ–º—è:** {start_time}\n"
        response += f"üë• **–£—á–∞—Å—Ç–Ω–∏–∫–∏:** {participants}\n"
        response += f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n\n"

    await message.answer(response, parse_mode="Markdown")


@app.get("/call/{code}/info")
async def call_info(code: str, request: Request):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–≤–æ–Ω–∫–µ —Å —É—á–µ—Ç–æ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞"""
    client_ip = request.client.host

    if code in calls_storage:
        call = calls_storage[code]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
        is_organizer = False
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –ø–æ referrer –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º
            referer = request.headers.get('referer', '')
            if 'Telegram' in referer or 'tg' in referer.lower():
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ JWT –∏–ª–∏ —Å–µ—Å—Å–∏–∏
                is_organizer = True
        except:
            pass

        response = {
            "exists": True,
            "room_name": call['room_name'],
            "is_organizer": is_organizer,
            "jwt_token": call['jwt_token'] if is_organizer else None,
            "active": call['active'],
            "participants_count": len(call['participants'])
        }
        return response

    return {"exists": False}


@app.post("/call/{code}/join")
async def join_call(code: str, request: Request):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –∑–∞–ø–∏—Å—å—é –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    client_ip = request.client.host

    if code in calls_storage:
        call = calls_storage[code]
        user_id = f"user_{client_ip}_{int(datetime.now().timestamp())}"

        # –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in call['participants']:
            call['participants'].append({
                'user_id': user_id,
                'joined_at': datetime.now().isoformat(),
                'ip': client_ip
            })

        call['active'] = True

        return {
            "success": True,
            "user_id": user_id,
            "participants_count": len(call['participants'])
        }

    return {"success": False}

# Webhook endpoint –¥–ª—è Telegram
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/ping")
async def ping():
    return {"ok": True}


@app.on_event("startup")
async def on_startup():
    webhook_url = f"{WEBAPP_URL}/webhook"
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Jitsi VideoCall Bot started successfully. Webhook: {webhook_url}")
        logger.info(f"‚úÖ Jitsi Domain: {JITSI_DOMAIN}")
    except Exception as e:
        logger.error(f"‚ùå Webhook setup failed: {e}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=10000)