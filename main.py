import os
import logging
import random
import json
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import WebAppInfo, InlineKeyboardButton, InlineKeyboardMarkup
from fastapi import FastAPI, Request, WebSocket, WebSocketDisconnect
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")
WEBAPP_URL = os.environ.get("WEBAPP_URL")

if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN environment variable is required!")
if not WEBAPP_URL:
    raise ValueError("WEBAPP_URL environment variable is required!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
app = FastAPI()

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.mount("/static", StaticFiles(directory="static"), name="static")


# –ü—Ä–æ—Å—Ç–æ–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
class ConnectionManager:
    def __init__(self):
        self.active_connections = {}

    async def connect(self, websocket: WebSocket, room_code: str):
        await websocket.accept()
        if room_code not in self.active_connections:
            self.active_connections[room_code] = []
        self.active_connections[room_code].append(websocket)

    def disconnect(self, websocket: WebSocket, room_code: str):
        if room_code in self.active_connections:
            if websocket in self.active_connections[room_code]:
                self.active_connections[room_code].remove(websocket)

    async def broadcast(self, room_code: str, message: dict, exclude_websocket=None):
        if room_code in self.active_connections:
            for connection in self.active_connections[room_code]:
                if connection != exclude_websocket:
                    try:
                        await connection.send_json(message)
                    except Exception as e:
                        logger.error(f"Error sending message: {e}")


manager = ConnectionManager()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∑–≤–æ–Ω–∫–æ–≤
calls_storage = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=WEBAPP_URL))]
    ])
    await message.answer(
        "üé• **VideoCall Bot**\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∏ —á–µ—Ä–µ–∑ Telegram!\n\n"
        "üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
        "/create - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫\n"
        "/list - —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–≤–æ–Ω–∫–æ–≤\n"
        "/delete - —É–¥–∞–ª–∏—Ç—å –∑–≤–æ–Ω–æ–∫\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


@dp.message(Command("create"))
async def cmd_create(message: types.Message):
    code = ''.join([str(random.randint(0, 9)) for _ in range(6)])

    calls_storage[code] = {
        'creator_id': message.from_user.id,
        'start_ts': int(datetime.now().timestamp()),
        'active': True
    }

    await message.answer(
        f"‚úÖ **–ó–≤–æ–Ω–æ–∫ —Å–æ–∑–¥–∞–Ω!**\n\n"
        f"üî¢ **–ö–æ–¥ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:** `{code}`\n"
        f"‚è∞ **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** 2 —á–∞—Å–∞\n\n"
        f"üì± **–ß—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è:**\n"
        f"1. –û—Ç–∫—Ä–æ–π—Ç–µ Mini App –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\n"
        f"2. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ `{code}`\n"
        f"3. –ù–∞–∂–º–∏—Ç–µ '–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è'",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üé• –û—Ç–∫—Ä—ã—Ç—å VideoCall", web_app=WebAppInfo(url=f"{WEBAPP_URL}?code={code}"))]
        ])
    )


@dp.message(Command("list"))
async def cmd_list(message: types.Message):
    user_calls = {code: data for code, data in calls_storage.items()
                  if data['creator_id'] == message.from_user.id}

    if not user_calls:
        await message.answer("üì≠ **–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤**\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤—ã–π –∑–≤–æ–Ω–æ–∫",
                             parse_mode="Markdown")
        return

    response = "üìû **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏:**\n\n"
    for code, data in user_calls.items():
        start_time = datetime.fromtimestamp(data['start_ts']).strftime('%d.%m.%Y %H:%M')
        status = "‚úÖ –ê–∫—Ç–∏–≤–µ–Ω" if data['active'] else "‚ùå –ó–∞–≤–µ—Ä—à–µ–Ω"
        response += f"üî¢ **–ö–æ–¥:** `{code}`\n"
        response += f"‚è∞ **–í—Ä–µ–º—è:** {start_time}\n"
        response += f"üìä **–°—Ç–∞—Ç—É—Å:** {status}\n\n"

    await message.answer(response, parse_mode="Markdown")


@dp.message(Command("delete"))
async def cmd_delete(message: types.Message):
    args = message.text.split()
    if len(args) < 2:
        await message.answer("‚ùå **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:**\n`/delete <–∫–æ–¥_–∑–≤–æ–Ω–∫–∞>`\n\n–ü—Ä–∏–º–µ—Ä: `/delete 123456`",
                             parse_mode="Markdown")
        return

    code = args[1]
    if code in calls_storage and calls_storage[code]['creator_id'] == message.from_user.id:
        del calls_storage[code]
        await message.answer(f"‚úÖ **–ó–≤–æ–Ω–æ–∫ {code} —É–¥–∞–ª–µ–Ω**", parse_mode="Markdown")
    else:
        await message.answer("‚ùå **–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è**", parse_mode="Markdown")


# WebSocket endpoint
@app.websocket("/ws/{room_code}")
async def websocket_endpoint(websocket: WebSocket, room_code: str):
    await manager.connect(websocket, room_code)
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await manager.broadcast(room_code, {
            "type": "user_joined"
        }, exclude_websocket=websocket)

        while True:
            data = await websocket.receive_text()
            message = json.loads(data)

            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
            await manager.broadcast(room_code, message, exclude_websocket=websocket)

    except WebSocketDisconnect:
        manager.disconnect(websocket, room_code)
        await manager.broadcast(room_code, {
            "type": "user_left"
        })


# FastAPI endpoints
@app.get("/")
async def read_root():
    return FileResponse("static/index.html")


@app.get("/call/{code}/status")
async def call_status(code: str):
    if code in calls_storage:
        call = calls_storage[code]
        end_time = call['start_ts'] + (120 * 60)
        current_time = datetime.now().timestamp()
        is_active = call['active'] and current_time <= end_time

        time_left = max(0, end_time - current_time)
        minutes_left = int(time_left // 60)

        return {
            "active": is_active,
            "exists": True,
            "minutes_left": minutes_left
        }
    return {"active": False, "exists": False}


@app.post("/call/{code}/join")
async def join_call(code: str):
    if code in calls_storage:
        calls_storage[code]['active'] = True
        return {"success": True}
    return {"success": False}


# Webhook endpoint –¥–ª—è Telegram
@app.post("/webhook")
async def webhook(request: Request):
    try:
        data = await request.json()
        update = types.Update(**data)
        await dp.feed_update(bot, update)
        return {"status": "ok"}
    except Exception as e:
        logger.error(f"Webhook error: {e}")
        return {"status": "error", "message": str(e)}


@app.get("/ping")
async def ping():
    return {"ok": True}


@app.on_event("startup")
async def on_startup():
    webhook_url = f"{WEBAPP_URL}/webhook"
    try:
        await bot.set_webhook(webhook_url)
        logger.info(f"‚úÖ Bot started successfully. Webhook: {webhook_url}")
    except Exception as e:
        logger.error(f"‚ùå Webhook setup failed: {e}")


@app.on_event("shutdown")
async def on_shutdown():
    await bot.session.close()


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=10000)