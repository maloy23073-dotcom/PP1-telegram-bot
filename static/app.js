// –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
console.log('üöÄ Starting Telegram Call App');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É Telegram WebApp
let webApp = null;
if (window.Telegram && window.Telegram.WebApp) {
    webApp = Telegram.WebApp;
    console.log('‚úÖ Telegram WebApp detected');

    // –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
    webApp.expand();
    webApp.setHeaderColor('#182533');
    webApp.setBackgroundColor('#182533');
} else {
    console.log('‚ÑπÔ∏è Running in browser mode');
}

// –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function showStatus(message, type = 'info') {
    console.log('Status:', message);

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –Ω–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞
    let statusEl = document.getElementById('status');
    if (!statusEl) {
        statusEl = document.createElement('div');
        statusEl.id = 'status';
        statusEl.style.cssText = `
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(0,0,0,0.9);
            color: white;
            padding: 12px 20px;
            border-radius: 10px;
            z-index: 1000;
            max-width: 90%;
            text-align: center;
            font-size: 14px;
        `;
        document.body.appendChild(statusEl);
    }

    statusEl.textContent = message;
    statusEl.style.display = 'block';

    // –¶–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if (type === 'error') {
        statusEl.style.background = 'rgba(231, 76, 60, 0.9)';
    } else if (type === 'success') {
        statusEl.style.background = 'rgba(39, 174, 96, 0.9)';
    } else {
        statusEl.style.background = 'rgba(52, 152, 219, 0.9)';
    }

    // –ê–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
    setTimeout(() => {
        statusEl.style.display = 'none';
    }, 3000);
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∑–≤–æ–Ω–∫—É
async function joinCall() {
    console.log('Join call function called');

    const codeInput = document.getElementById('codeInput');
    const code = codeInput ? codeInput.value.trim() : '';

    if (!code || code.length !== 6) {
        showStatus('–í–≤–µ–¥–∏—Ç–µ 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥', 'error');
        return;
    }

    showStatus('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞...', 'info');

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        const response = await fetch(`/call/${code}/info`);
        console.log('Response status:', response.status);

        if (!response.ok) {
            throw new Error('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏');
        }

        const callInfo = await response.json();
        console.log('Call info:', callInfo);

        if (!callInfo.exists) {
            showStatus('–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            return;
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —É—á–∞—Å—Ç–∏–µ
        await fetch(`/call/${code}/join`, { method: 'POST' });

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º Jitsi
        openJitsiCall(callInfo.room_name);

    } catch (error) {
        console.error('Error:', error);
        showStatus('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', 'error');
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è Jitsi
function openJitsiCall(roomName) {
    const jitsiUrl = `https://meet.jit.si/${roomName}`;
    console.log('Opening Jitsi URL:', jitsiUrl);

    showStatus('–û—Ç–∫—Ä—ã–≤–∞—é –≤–∏–¥–µ–æ–∑–≤–æ–Ω–æ–∫...', 'success');

    if (webApp) {
        // –í Telegram –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ
        webApp.openLink(jitsiUrl);

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º Mini App —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
        setTimeout(() => {
            webApp.close();
        }, 1000);
    } else {
        // –í –±—Ä–∞—É–∑–µ—Ä–µ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
        window.open(jitsiUrl, '_blank');
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
function createCall() {
    if (webApp) {
        webApp.showPopup({
            title: '–°–æ–∑–¥–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–∞',
            message: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –≤ —á–∞—Ç–µ —Å –±–æ—Ç–æ–º',
            buttons: [{ type: 'ok' }]
        });
    } else {
        showStatus('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create –≤ –±–æ—Ç–µ Telegram', 'info');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function initializeApp() {
    console.log('Initializing app...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const codeInput = document.getElementById('codeInput');
    const joinBtn = document.getElementById('joinBtn');
    const createBtn = document.getElementById('createCallBtn');

    if (!codeInput || !joinBtn || !createBtn) {
        console.error('Required elements not found');
        showErrorPage();
        return;
    }

    // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    joinBtn.addEventListener('click', joinCall);
    createBtn.addEventListener('click', createCall);

    codeInput.addEventListener('keypress', (e) => {
        if (e.key === 'Enter') joinCall();
    });

    // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –∏–∑ URL
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    if (code) {
        codeInput.value = code;
    }

    console.log('‚úÖ App initialized successfully');
    showStatus('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ', 'success');
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—à–∏–±–∫–∏
function showErrorPage() {
    document.body.innerHTML = `
        <div style="
            padding: 40px 20px; 
            text-align: center; 
            color: white; 
            background: #182533; 
            height: 100vh; 
            display: flex; 
            flex-direction: column; 
            justify-content: center; 
            align-items: center;
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
        ">
            <div style="font-size: 48px; margin-bottom: 20px;">üìû</div>
            <h2 style="margin-bottom: 10px; color: #fff;">Telegram Call</h2>
            <p style="color: #8ba0b2; margin-bottom: 30px;">–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</p>
            <button onclick="location.reload()" style="
                padding: 12px 24px; 
                background: #2ea6ff; 
                color: white; 
                border: none; 
                border-radius: 8px; 
                cursor: pointer; 
                font-size: 16px;
            ">
                –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
            </button>
        </div>
    `;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–≥–¥–∞ DOM –∑–∞–≥—Ä—É–∂–µ–Ω
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    initializeApp();
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('Global error:', event.error);
});