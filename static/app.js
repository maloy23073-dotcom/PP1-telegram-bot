// –≠–ª–µ–º–µ–Ω—Ç—ã DOM
const welcomePage = document.getElementById('welcomePage');
const callPage = document.getElementById('callPage');
const codeInput = document.getElementById('codeInput');
const joinBtn = document.getElementById('joinBtn');
const createCallBtn = document.getElementById('createCallBtn');
const backBtn = document.getElementById('backBtn');
const currentCodeSpan = document.getElementById('currentCode');
const timerElement = document.getElementById('timer');
const localVideo = document.getElementById('localVideo');
const remotesContainer = document.getElementById('remotes');
const statusElement = document.getElementById('status');
const toggleMic = document.getElementById('toggleMic');
const toggleCam = document.getElementById('toggleCam');
const leaveBtn = document.getElementById('leaveBtn');

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let roomCode = '';
let localStream = null;
let isMicOn = true;
let isCamOn = true;
let callStartTime = null;
let timerInterval = null;

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
function showPage(page) {
    console.log('–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É:', page.id);

    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    welcomePage.style.display = 'none';
    callPage.style.display = 'none';

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    page.style.display = 'flex';

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    document.querySelectorAll('.page').forEach(p => p.classList.remove('active'));
    page.classList.add('active');
}

function showStatus(message, type = 'info') {
    console.log('–°—Ç–∞—Ç—É—Å:', message);
    statusElement.textContent = message;
    statusElement.className = `connection-status ${type}`;
    statusElement.style.display = 'block';

    setTimeout(() => {
        statusElement.style.display = 'none';
    }, 3000);
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
async function checkCallActive(code) {
    try {
        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞:', code);
        const response = await fetch(`/call/${code}/status`);
        const data = await response.json();
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', data);
        return data.active;
    } catch (e) {
        console.error("Check call active error:", e);
        return false;
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∑–≤–æ–Ω–∫–µ
async function joinCall(code) {
    try {
        console.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∑–≤–æ–Ω–∫–µ:', code);
        const response = await fetch(`/call/${code}/join`, { method: 'POST' });
        const data = await response.json();
        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', data);
        return data.success;
    } catch (e) {
        console.error("Join call error:", e);
        return false;
    }
}

// –†–∞–±–æ—Ç–∞ —Å –º–µ–¥–∏–∞
async function startLocalMedia() {
    try {
        console.log('–ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º');
        localStream = await navigator.mediaDevices.getUserMedia({
            video: true,
            audio: true
        });
        console.log('–î–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º –ø–æ–ª—É—á–µ–Ω');
        localVideo.srcObject = localStream;
        return true;
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞:', error);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É');
    }
}

function stopLocalMedia() {
    if (localStream) {
        localStream.getTracks().forEach(track => track.stop());
        localStream = null;
        console.log('–ú–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ç–∫–ª—é—á–µ–Ω—ã');
    }
}

// –¢–∞–π–º–µ—Ä –∑–≤–æ–Ω–∫–∞
function startTimer() {
    callStartTime = Date.now();
    timerInterval = setInterval(() => {
        const elapsed = Date.now() - callStartTime;
        const hours = Math.floor(elapsed / 3600000).toString().padStart(2, '0');
        const minutes = Math.floor((elapsed % 3600000) / 60000).toString().padStart(2, '0');
        const seconds = Math.floor((elapsed % 60000) / 1000).toString().padStart(2, '0');
        timerElement.textContent = `${hours}:${minutes}:${seconds}`;
    }, 1000);
    console.log('–¢–∞–π–º–µ—Ä –∑–∞–ø—É—â–µ–Ω');
}

function stopTimer() {
    if (timerInterval) {
        clearInterval(timerInterval);
        timerInterval = null;
        console.log('–¢–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
function toggleMicrophone() {
    if (localStream) {
        const audioTrack = localStream.getAudioTracks()[0];
        if (audioTrack) {
            audioTrack.enabled = !audioTrack.enabled;
            isMicOn = audioTrack.enabled;
            toggleMic.classList.toggle('muted', !isMicOn);
            console.log('–ú–∏–∫—Ä–æ—Ñ–æ–Ω:', isMicOn ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω');
            showStatus(`–ú–∏–∫—Ä–æ—Ñ–æ–Ω ${isMicOn ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}`, 'info');
        }
    }
}

function toggleCamera() {
    if (localStream) {
        const videoTrack = localStream.getVideoTracks()[0];
        if (videoTrack) {
            videoTrack.enabled = !videoTrack.enabled;
            isCamOn = videoTrack.enabled;
            toggleCam.classList.toggle('muted', !isCamOn);
            localVideo.style.opacity = isCamOn ? '1' : '0.5';
            console.log('–ö–∞–º–µ—Ä–∞:', isCamOn ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞');
            showStatus(`–ö–∞–º–µ—Ä–∞ ${isCamOn ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`, 'info');
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function join() {
    console.log('=== –ù–ê–ß–ê–õ–û –ü–†–û–¶–ï–°–°–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø ===');
    const code = codeInput.value.trim();

    if (!/^\d{6}$/.test(code)) {
        showStatus("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 6 —Ü–∏—Ñ—Ä", "error");
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞
    showStatus("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–≤–æ–Ω–∫–∞...");
    const isActive = await checkCallActive(code);

    if (!isActive) {
        showStatus("–ó–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω", "error");
        return;
    }

    // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
    showStatus("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ –∑–≤–æ–Ω–∫–µ...");
    const joined = await joinCall(code);

    if (!joined) {
        showStatus("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ –∑–≤–æ–Ω–∫–µ", "error");
        return;
    }

    roomCode = code;
    currentCodeSpan.textContent = code;
    showStatus("–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");

    try {
        await startLocalMedia();
        console.log('‚úÖ –ú–µ–¥–∏–∞—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã');
    } catch (e) {
        showStatus("–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–µ–¥–∏–∞: " + e.message, "error");
        return;
    }

    showStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");

    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    startTimer();

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–≤–æ–Ω–∫–∞
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–≤–æ–Ω–∫–∞');
    showPage(callPage);
    console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∑–≤–æ–Ω–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω');

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    setTimeout(() => {
        showStatus("–ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", "success");
    }, 500);
}

function leaveCall() {
    console.log('=== –í–´–•–û–î –ò–ó –ó–í–û–ù–ö–ê ===');
    stopTimer();
    stopLocalMedia();
    roomCode = '';
    showPage(welcomePage);
    codeInput.value = '';
    showStatus("–ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω", "info");
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
joinBtn.addEventListener('click', join);

codeInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
        join();
    }
});

createCallBtn.addEventListener('click', () => {
    showStatus("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /create –≤ –±–æ—Ç–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞", "info");
});

backBtn.addEventListener('click', leaveCall);

toggleMic.addEventListener('click', toggleMicrophone);
toggleCam.addEventListener('click', toggleCamera);
leaveBtn.addEventListener('click', leaveCall);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL (–∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–¥–∞)
window.addEventListener('load', () => {
    console.log('üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    const urlParams = new URLSearchParams(window.location.search);
    const code = urlParams.get('code');
    if (code && /^\d{6}$/.test(code)) {
        codeInput.value = code;
        console.log('üî¢ –ö–æ–¥ –∏–∑ URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', code);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
    welcomePage.style.display = 'flex';
    callPage.style.display = 'none';
});

// –î–æ–±–∞–≤–∏–º CSS –∫–ª–∞—Å—Å—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–Ω–æ–ø–æ–∫
const style = document.createElement('style');
style.textContent = `
    .control-btn.muted {
        background: var(--tg-danger) !important;
        opacity: 0.7;
    }
    
    .connection-status {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(0, 0, 0, 0.9);
        color: white;
        padding: 12px 24px;
        border-radius: 12px;
        font-size: 14px;
        z-index: 1000;
        text-align: center;
    }
    
    .connection-status.success {
        background: var(--tg-success);
    }
    
    .connection-status.error {
        background: var(--tg-danger);
    }
    
    .connection-status.info {
        background: var(--tg-warning);
        color: black;
    }
`;
document.head.appendChild(style);

console.log('üöÄ app.js –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');